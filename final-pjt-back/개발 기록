1116: 회원가입 진행 중.

문제점 발생: serializer가 추가 정보를 뱉지 않는다.
>> serializer를 많이 뜯어 고쳐봤지만, 여전히 안되는 상황

chatgpt에게 질문: 뾰족한 답 없었음.

postman 전송 말고 직접 페이지를 가본 결과, customregist를 전혀 반영하지 않고 있었음.

해당부분 챗지피티 질문 결과

주요 수정 사항 설명:
커스텀 회원가입 뷰를 정의

RegisterView를 상속하여 CustomRegisterView를 정의하고, serializer_class를 CustomRegisterSerializer로 설정했습니다. 이를 통해 추가 필드가 있는 회원가입 시리얼라이저가 반영됩니다.

URL 패턴에 커스텀 뷰 연결:

기존 dj_rest_auth.registration.urls를 삭제하고, accounts/signup/ 경로에 직접 CustomRegisterView를 연결했습니다.
이렇게 하면 회원가입 요청 시 기본 dj-rest-auth의 회원가입 뷰가 아닌, 우리가 정의한 커스텀 뷰가 사용되도록 설정됩니다.

요약:
urls.py에서 dj_rest_auth.registration.urls 대신 커스텀 회원가입 뷰를 직접 연결했습니다.
CustomRegisterView를 통해 추가 필드가 반영될 수 있도록 했습니다.
수정 후 Postman을 통해 테스트하고, 로그 및 디버깅을 통해 문제의 원인을 점검해 보세요.
이렇게 변경하시면, 커스텀 필드들이 반영되는지 확인해 보시고, 문제가 여전히 해결되지 않으면 추가적인 정보나 로그를 알려주시면 더 자세히 도와드리겠습니다.

배운 점: 확인을 똑바로 해서 문제의 원인을 명확하게 찾자. gpt도 그래야 답을 준다.
===============================================================================================
1116: 프로필 페이지 request.user vs get object or 404

챗지피티한테 코드리뷰를 맡겨보니, 프로필 유저네임을 바탕으로  get object or 404를 출력하기 보단, request.user를 사용해 속도를 줄이는 것이 더 나은 방법이라는 이야기를 들었다.
보안, 버그 측면에서 문제가 발생할 수 있다 생각되어 이 점에 대해 물어보니, 권한관리를 통해 안전망을 구축한 후 사용하는 것이 대안이 될 수 있다는 응답을 얻었다.
관련 부분에서 문제가 발생시 우선 점검해야 할 상황이면서도, 미들웨어에서 변경 될 가능성 등을 고려해 보아야겠다.
===============================================================================================

1117: 아티클 crud, 댓글 crud//  챌린지 crud 구현


viewset을 적용하면서 챗지피티의 도움을 특히 많이 받은 것 같다. 
tool의 사용법을 모르는 상태에서 사용법을 전수받는 정도는 문제가 되지 않을 수 있지만, 돌아가는 방식을 이해하지 못한다면 
문제가 발생할 수 있다 생각했기 때문에 의문점을 (왜 이걸 넣지 않아도 되냐, 기본 구성을 어디서 볼 수 있냐) 많이 물어본 것은 좋은 학습 방향같았다. 코드 리뷰 역시 gpt를 통해 진행했으나, 좀 더 나의 코드가 
될 수 있도록 한길이형, 다른 사람들과 많은 의견을 나누어 봐야겠다.

===============================================================================================

지도 API : 카카오API OR 네이버 API
한국수출입은행 환율정보 API
금융감독원 API

추가 라이브러리
CHARTJS
VUETIFY

각 팀의 아키텍처
ERD and USECASE로 설명 (급하면 ERD만)

1. 메인페이지

2. 회원 커스터마이징 (기본적으로 다 O) 
  유저이름, 
  이메일, 
  가입 상품 필드(가입 상품에 m:n으로 추가 예정) O
  
3. 예적금 금리 비교 (2/3)
    1. 전체 조회 O
    2. 필터링 : 은행 기준, 상품 주제 기준 O
    3. 관리자의 금리정보 수정기준 - 수정 후 이메일 전송, 네이버로 @도전과제, 다 구현하고 하자


4. 환율 계산기 (프론트가 더 중요)
    - 그날그날 환율 받아오기 기능 O

5. 카카오맵api를 활용한 근처 은행 검색
    위치와 은행을 선택할 수 있도록 해야 함
    - (프론트에서 구현, 프론트 우선순위 높음!!)

    
6.  CRUD 커뮤니티 
    - 일반 CRUD (O)
    - Q&A (O)
    - 전문가 칼럼 (제한만 구현하면 됨)


    - 챌린지 게시판 (미구현, 필수구현 이후 구현) 

7. 프로필 페이지
    - 차트 라이브러리를 통해 상품금리정보를 출력 가능
    - 가입한 금융상품 리스트는 필수
    - 수정에 대한 적절한 화면 구성

8. 금융상품 추천 알고리즘
    - 무난: 코사인 유사도
    - 도전: KAKAOPAGE식 태그 or 자소설닷컴식 추천

        1. N개 이상 담는다. or 포트폴리오를 작성한다.
        2. 박스 형식으로 추천하는 금융 상품들이 나온다.
        3. 새로운 상품 실시간 갱신
    - 포트폴리오 페이지: 도전형 / 성실형 / 탐욕형 ...
    
    1. 포트폴리오를 만든다 (회원가입 시 작성 or 추천 받게될 시 작성)
    2. 세로 바 구성 포트폴리오 성향별 + Polarich가 추천하는 
    3. 가로에 3*3 div로 나오게 함
    4. 즐겨찾기 가능



9. 생성형 API
    - 추천에 활용 가능
    - AI 답변에 활용 가능
===========================================
1118: 환율 정보

#서버 시간 문제
문제 상황 발생: 서버 시간을 바꿨더니, api에서 요청을 거부했다. ssl 인증서 문제고 구글 검색시 정보 거의 없음.



1118: 예적금 정보

#모델 저장에 관해
예적금 모델 시리얼라이저를 생성 중, 예적금의 모델 구성이 완전히 동일하기 때문에, 반복해서 작성하는 것이 비효율적이란 생각이 들었다.
검색을 해보니, 이 경우엔 1. 모델을 통합해서 생성하는 방안, 2. 베이스 모델로부터 상속해서 코드를 간결화하는 방안이 있음을 알 수 있었다.
나는 1. 같은 금융 코드가 있을 수 있다는 점, 2.좀 더 익숙하고 쉬운 방법을 1차적으로 선택하는 것, 예적금의 분리에 따라 확장할 수 있는 가능성
을 종합적으로 고려하여, 통합 후 타입에 따라 구분하는 방법 대신 베이스 모델로부터 예금, 적금이 상속을 받는 방식을 선택하기로 했다.

#링크에 관해
1. 유저가 예, 적금 api를 받는 링크에 접속하는 것이 비효율적이라 생각해, 관리자만 접속할 수 있는 저장 함수를 시행하는 url을 새로 만들었다.
2. 관리자만 접근이 가능하고, 관리자 접근 시 저장이 성공적으로 이루어지는 것을 확인했다.

3. 그런데, 존재하지 않는 주소로 입력했을 때, 관리자 작업이 이루어지는 url인  secure/save_saving/이 그대로 노출되는 것을 확인했다.
4. 이런 url이 있음을 아는 것 자체가 보안에 문제가 되지 않을까?

해결 방안: 커스터마이징 404 채널을 만들자 >> 작업할게 너무 많다...후순위?

#검색 기능 구현
1118 15:28 
- 은행명, 상품 이름 기준으로 검색을 하고, 금리순 정렬을 구현하였다.
- 옵션을 모두 보여줄지, 상품을 기준으로 보여줄 지 많은 고민이 존재하나, 금리 순 정렬 등 구현에 있어 옵션 리스트가 낫다 생각했기 때문에 그렇게 구현했다.
- 하지만, 사용자 관점에서 중복된 상품이 많이 출력되는 것 처럼 보일 수 있기에, 프론트 완성 후 조정을 진행할 수도 있을 것 같다.


#추천 기능 구현

#1 추천을 위한 포트폴리오
-챗지피티를 사용해 모델을 생성하였다.
 -자신으로부터 구현한 모델 설계: 질문 시스템에 들어갈 사항들
 -선택 기준(연봉 같은 경우를 미드 로우 하이로 설정하면 사회과학적으로 애매할 수 있음.)
 
 1121 챗 지피티에 대해:
 당장 하는게 바쁘다는 이유로 개발일지를 좀 쉬었다. 하지만 프로젝트 기간 내가 했다는걸 남길 수 있는건 일지 뿐이다! 정신 차리자!

 챗지피티 이용 빈도가 늘어났다. 둘다 프론트엔드 디자인에 서툴러서 당연한 일이지만, 코드를 읽기 힘들 정도로 의존하게 되는 것은 피하고 싶다.

 무한스크롤 구현 과정이 그 예시일 것이다. 페이지네이션 구현정도만 해도 충분히 내 능력으로 소화할 수 있는 범위인데, 괜히 무한스크롤로 구현 해보려다가 하드코딩만 늘어나고, 해당 부분 코드를 읽기 힘들어졌다.

 도전 과제를 제외하고, 전부 관통 기존 프로젝트에서 해본 주제인 만큼, 앞으로는 최대한 반복작업, 디자인 요소에만 챗지피티를 사용할 예정이다.

1121 컴포넌트 분리의 중요성:

챗지피티에게 무작정 짜달라기 보단, 필요한 컴포넌트의 갯수, 순서 등을 질문하며 프로필 페이지를 개발하고 있다.
맙소사! 2~3개로 끝낸 것이 7~11개 이상으로 늘어나고 있다. 2~3개 컴포넌트로 다 끝낼거면, vue같은 프레임워크를 사용할 일이 없는 것이다!
상품 리스트나 아티클을 개발할 때 이런 컴포넌트 분리를 해뒀으면, 그냥 <com /> 이거 치고 끝낼 작업에 머리를 싸맨다는 것을 조금 느겼다.


1122 

새벽 3시...내일 아침이 걱정된다.
잡기술로 중요한 기능들의 구현이 늘어지는 하루였다. 4일 정도 남은 개발 기간, 실질적으론 2~3일이다.
기능 구현에 집중해야겠다. 팝업이 아니라 페이지 이동이여도 충분히 좋은 페이지를 만들 수 있고, 기능에 집착하다 오히려 사용자 경험을 잃을 수 있으니까...

